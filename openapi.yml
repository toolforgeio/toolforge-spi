openapi: 3.0.2
info:
  title: ToolForge API
  description: ToolForge is the self-serve tools platform for teams
  contact:
    email: api@toolforge.io
  version: 0.0.0
servers:
  - url: https://api.toolforge.io/v1
tags:
  - name: account
    description: Endpoints for manipulating accounts
  - name: tool
    description: Endpoints for manipulating tools
  - name: execution
    description: Endpoints for manipulating executions
  - name: docker
    description: Endpoints for managing Docker integration
paths:
  /accounts:
    get:
      tags:
        - account
      summary: List accounts
      description: List accounts one page at a time
      operationId: listAccounts
      parameters:
        - name: q
          in: query
          description: A prefix query to filter accounts
          schema:
            type: string
            format: PrefixQuery
            example: bbaggins
        - name: limit
          in: query
          description: The maximum number of accounts to return per page
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 100
            default: 10
        - name: cursor
          in: query
          description: The pagination cursor
          schema:
            type: string
            format: AccountCursor
        - name: order
          in: query
          description: The order in which records are returned
          schema:
            $ref: '#/components/schemas/AccountListOrdering'
      responses:
        200:
          description: The user list was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPage'

  /accounts/{accountReference}:
    parameters:
      - name: accountReference
        in: path
        description: The ID of the account to retrieve, or "me"
        required: true
        schema:
          type: string
          format: AccountReference
    get:
      tags:
        - account
      summary: Get account
      description: Get one account
      operationId: getAccount
      responses:
        200:
          description: The user was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        404:
          $ref: '#/components/responses/NotFound'

  /accounts/by/id/{accountId}:
    parameters:
      - name: accountId
        in: path
        description: The ID of the account to retrieve
        required: true
        schema:
          type: string
          format: AccountId
    get:
      tags:
        - account
      summary: Get account by ID
      description: Get one account by ID
      operationId: getAccountById
      responses:
        200:
          description: The user was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        404:
          $ref: '#/components/responses/NotFound'

  /accounts/by/username/{accountUsername}:
    parameters:
      - name: accountUsername
        in: path
        description: The username of the account to retrieve
        required: true
        schema:
          type: string
          format: AccountUsername
    get:
      tags:
        - account
      summary: Get account by username
      description: Get one account by username
      operationId: getAccountByUsername
      responses:
        200:
          description: The user was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        404:
          $ref: '#/components/responses/NotFound'

  /accounts/{accountReference}/picture:
    parameters:
      - name: accountReference
        in: path
        description: The ID of the account to retrieve, or "me"
        required: true
        schema:
          type: string
          format: AccountReference
    get:
      tags:
        - account
      summary: Get account profile picture
      description: Get one account's profile picture
      operationId: getAccountPicture
      responses:
        200:
          description: The user was returned successfully
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        404:
          $ref: '#/components/responses/NotFound'

  /tools:
    get:
      tags:
        - tool
      summary: List tools
      description: List one page of tools
      operationId: listTools
      parameters:
        - name: q
          in: query
          description: A keyword query to filter tool
          schema:
            type: string
            format: KeywordQuery
            example: twitter account
        - name: order
          in: query
          description: The order in which tools should be returned
          schema:
            $ref: '#/components/schemas/ToolListOrdering'
        - name: limit
          in: query
          description: The maximum number of tools to return per page
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 0
            maximum: 100
        - name: cursor
          in: query
          description: The pagination cursor
          schema:
            type: string
            format: ToolCursor
      responses:
        200:
          description: The list of tools was returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolPage'
    post:
      tags:
        - tool
      summary: Create tool
      description: Create a new tool
      operationId: createTool
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ToolDefinition'
      responses:
        200:
          description: The tool was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
        422:
          description: The tool could not be created. Is the name unique?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
                
  /tools/{toolId}:
    parameters:
      - $ref: '#/components/parameters/toolId'
    get:
      tags:
        - tool
      summary: Get tool
      description: Get metadata about one tool
      operationId: getTool
      responses:
        200:
          description: The tool was found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

  /tools/{toolId}/execute:
    parameters:
      - $ref: '#/components/parameters/toolId'
    post:
      tags:
        - tool
        - execution
      summary: Execute latest tool version
      description: Execute the latest version of the given tool
      operationId: executeLatestToolVersion
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Invocation'
      responses:
        201:
          description: The execution was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

  /tools/{toolId}/versions:
    parameters:
      - $ref: '#/components/parameters/toolId'
    get:
      tags:
        - tool
      summary: List tool versions
      description: List one page of versions of the given tool. Tool versions are sorted by creation time, descending.
      operationId: listToolVersions
      parameters:
        - name: limit
          in: query
          description: The maximum number of tools to return per page
          schema:
            type: integer
            format: int32
            default: 10
        - name: cursor
          in: query
          description: The pagination cursor
          schema:
            type: string
            format: ToolCursor
      responses:
        200:
          description: The tool was found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolPage'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

  /tools/{toolId}/versions/{toolVersion}:
    parameters:
      - $ref: '#/components/parameters/toolId'
      - $ref: '#/components/parameters/toolVersion'
    get:
      tags:
        - tool
      summary: Get tool version
      description: Get metadata about one version of one tool
      operationId: getToolVersion
      responses:
        200:
          description: The tool was found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

  /tools/{toolId}/versions/{toolVersion}/execute:
    parameters:
      - $ref: '#/components/parameters/toolId'
      - $ref: '#/components/parameters/toolVersion'
    post:
      tags:
        - tool
        - execution
      summary: Execute tool version
      description: Execute the given version of the given tool
      operationId: executeToolVersion
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Invocation'
      responses:
        201:
          description: The execution was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

  /executions:
    get:
      tags:
        - execution
      summary: List executions
      description: List one page of executions
      operationId: listExecutions
      parameters:
        - name: q
          in: query
          description: A keyword query for filtering executions
          schema:
            type: string
            format: KeywordQuery
            example: twitter account
        - name: owner
          in: query
          description: The owner of executions to return
          schema:
            type: string
            format: AccountReference
        - name: state
          in: query
          description: The state of executions to return
          schema:
            $ref: '#/components/schemas/ExecutionState'
        - name: limit
          in: query
          description: The maximum number of executions to return per page
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 0
            maximum: 100
        - name: cursor
          in: query
          description: The pagination cursor
          schema:
            type: string
            format: ExecutionCursor
      responses:
        200:
          description: The list of executions returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionPage'

  /executions/{executionId}:
    parameters:
      - $ref: '#/components/parameters/executionId'
    get:
      tags:
        - execution
      summary: Get execution
      description: Get metadata about one execution
      operationId: getExecution
      responses:
        200:
          description: The execution was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        410:
          $ref: '#/components/responses/Gone'

  /executions/{executionId}/cancel:
    parameters:
      - $ref: '#/components/parameters/executionId'
    post:
      tags:
        - execution
      summary: Cancel execution
      description: Cancel an execution
      operationId: cancelExecution
      responses:
        200:
          description: The execution was canceled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        410:
          $ref: '#/components/responses/Gone'

  /executions/{executionId}/logs:
    parameters:
      - $ref: '#/components/parameters/executionId'
    get:
      tags:
        - execution
      summary: Get execution log page
      description: Get a page of the execution's logs
      operationId: listExecutionLogs
      parameters:
        - $ref: '#/components/parameters/limit'
        - name: cursor
          in: query
          description: The pagination cursor
          schema:
            type: string
            format: LogCursor
      responses:
        200:
          description: The execution was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogPage'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        410:
          $ref: '#/components/responses/Gone'

  /executions/{executionId}/inputs/{name}:
    parameters:
      - $ref: '#/components/parameters/executionId'
      - name: name
        in: path
        description: The name of the input to retrieve
        required: true
        schema:
          type: string
          format: ExecutionInputName
    get:
      tags:
        - execution
      summary: Get execution input
      description: Get metadata about the given execution's given input slot
      operationId: getExecutionInputData
      responses:
        200:
          description: The input slot was retrieved successfully.
          content:
            '*/*':
              schema:
                type: string
                format: binary
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        410:
          $ref: '#/components/responses/Gone'

  /executions/{executionId}/outputs/{name}:
    parameters:
      - $ref: '#/components/parameters/executionId'
      - name: name
        in: path
        description: The name of the output to retrieve
        required: true
        schema:
          type: string
          format: ExecutionOutputName
    get:
      tags:
        - execution
      summary: Get execution output
      description: Get metadata about the given execution's given output slot
      operationId: getExecutionOutputData
      responses:
        200:
          description: The output slot was retrieved successfully.
          content:
            '*/*':
              schema:
                type: string
                format: binary
        202:
          description: The given execution is still running, so the data is not available at this time, but may be available later.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          description: The given execution has failed, so the data is not available at this time, and will not be available later.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        410:
          $ref: '#/components/responses/Gone'

  /executions/{executionId}/outputs/{name}.{extension}:
    parameters:
      - $ref: '#/components/parameters/executionId'
      - name: name
        in: path
        description: The name of the output to retrieve
        required: true
        schema:
          type: string
          format: ExecutionOutputName
      - name: extension
        in: path
        description: The extension of the output to retrieve
        required: true
        schema:
          type: string
          format: ExecutionOutputExtension
    get:
      tags:
        - execution
      summary: Get execution output
      description: Get metadata about the given execution's given output slot
      operationId: getExecutionOutputExtensionData
      responses:
        200:
          description: The output slot was retrieved successfully.
          content:
            '*/*':
              schema:
                type: string
                format: binary
        202:
          description: The given execution is still running, so the data is not available at this time, but may be available later.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          description: The given execution has failed, so the data is not available at this time, and will not be available later.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        410:
          $ref: '#/components/responses/Gone'
         
  /blobs:
    post:
      tags:
        - blob
      summary: Create a blob
      # NOTE: Send filename on x-blob-filename header.
      description: Create a new blob from the given data
      operationId: createBlob
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
      responses:
        201:
          description: The blob was created successfully
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Blob'
  
  /blobs/{blobId}:
    parameters:
      - $ref: '#/components/parameters/blobId'
    get:
      tags:
        - blob
      summary: Get a blob
      description: Retrieve information about the given blob
      operationId: getBlob
      responses:
        200:
          description: The blob was created successfully
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Blob'
        404:
          $ref: '#/components/responses/NotFound'
          
  /docker/otp:
    post:
      tags:
        - docker
      summary: Get one-time password for docker
      description: Get a one-time password to use for docker login. Valid for 5 minutes.
      operationId: getDockerOneTimePassword
      responses:
        200:
          description: The one-time password was created successfully.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DockerPassword'
        403:
          $ref: '#/components/responses/Forbidden'

components:
  responses:
    Processing:
      description: The requested data is still processing and is not ready yet.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    Forbidden:
      description: The current user does not have permission to perform the operation.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    NotFound:
      description: The object could not be found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    Conflict:
      description: The request conflicts with application state.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    Gone:
      description: The object has expired.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
            
  parameters:
    toolId:
      name: toolId
      in: path
      description: The ID of the tool to manipulate
      required: true
      schema:
        type: string
        format: ToolId
    toolVersion:
      name: toolVersion
      in: path
      description: The version of the tool to manipulate
      required: true
      schema:
        type: string
        format: VersionId
    executionId:
      name: executionId
      in: path
      description: The ID of the execution to manipulate
      required: true
      schema:
        type: string
        format: ExecutionId
    outputSlotId:
      name: outputSlotId
      in: path
      description: The ID of the output slot to manipulate
      required: true
      schema:
        type: string
        format: OutputSlotId
    blobId:
      name: blobId
      in: path
      description: The ID of the blob to manipulate
      required: true
      schema:
        type: string
        format: BlobId
    limit:
      name: limit
      in: query
      description: The maximum number of items to return per page
      required: false
      schema:
        type: integer
        format: int32
        default: 10
    
  schemas:
    # application/problem+json
    # https://datatracker.ietf.org/doc/html/rfc7807
    # https://lakitna.medium.com/understanding-problem-json-adf68e5cf1f8
    ErrorMessage:
      type: object
      properties:
        type:
          type: string
          format: url
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string

    AccountPreview:
      type: object
      required:
        - id
        - username
        - picture
      properties:
        id:
          type: string
          format: AccountId
        username:
          type: string
          format: AccountUsername
        picture:
          type: string
          format: url

    AccountDescription:
      allOf:
        - $ref: '#/components/schemas/AccountPreview'
        - type: object
          required:
            - createdAt
          properties:
            name:
              type: string
            email:
              type: string
              format: EmailAddress
            createdAt:
              type: string
              format: date-time
            activeAt:
              type: string
              format: date-time
            lastExecutionAt:
              type: string
              format: date-time
          
    Account:
      allOf:
        - $ref: '#/components/schemas/AccountDescription'
        - type: object
          properties: {}
          
    AccountListOrdering:
      type: string
      enum:
        - lastExecutionAt
        - activeAt
        - createdAt
        - username

    AccountPage:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AccountDescription'
        total:
          type: integer
          format: int32
        cursor:
          type: string
          format: AccountCursor

    LogPage:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
        cursor:
          type: string
          format: LogCursor
      
    LogEntry:
      type: object
      required:
      - timestamp
      - message
      properties:
        timestamp:
          type: string
          format: date-time
        message:
          type: string

    ToolDefinition:
      type: object
      required:
        - name
        - description
      properties:
        # TODO Installation configuration? Secrets?
        name:
          type: string
        description:
          type: string
          format: markdown

    ManifestEnvironmentVariable:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
        value:
          type: string

    ManifestEnvironmentSize:
      type: string
      enum:
        # 0.25CPU, 2GB Memory
        - tiny
        # 0.5CPU, 4GB Memory
        - small
        # 1.0CPU, 8GB Memory
        - medium
        # 2.0 CPU, 16GB Memory
        - large
        # 4.0 CPU, 30GB Memory
        - xlarge

    ManifestEnvironment:
      type: object
      properties:
        size:
          $ref: '#/components/schemas/ManifestEnvironmentSize'
        variables:
          type: array
          items:
            $ref: '#/components/schemas/ManifestEnvironmentVariable'

    Manifest:
      type: object
      properties:
        toolforge:
          # 1.0 for now
          type: string
          format: ManifestVersion
        tool:
          type: string
          format: ToolId
        environment:
          $ref: '#/components/schemas/ManifestEnvironment'
        # TODO cost? or is that in tool?
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDefinition'
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/ToolInput'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/ToolOutput'
            
    ToolListOrdering:
      type: string
      enum:
        - lastExecutedByTeamAt
        - lastExecutedByMeAt
        - name

    ToolPreview:
      type: object
      required:
        - id
        - owner
        - name
        - slug
      properties:
        id:
          type: string
          format: ToolId
        version:
          type: string
          format: VersionId
        owner:
          $ref: '#/components/schemas/AccountPreview'
        name:
          type: string
        slug:
          type: string
      
    ToolDescription:
      allOf:
        - $ref: '#/components/schemas/ToolPreview'
        - type: object
          required:
            - createdAt
            - description
          properties:
            description:
              type: string
              format: markdown
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            lastExecutedByMeAt:
              type: string
              format: date-time
            lastExecutedByTeamAt:
              type: string
              format: date-time

    Tool:
      allOf:
        - $ref: '#/components/schemas/ToolDescription'
        - type: object
          properties:
            parameters:
              type: array
              items:
                $ref: '#/components/schemas/Parameter'
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/ToolInput'
            outputs:
              type: array
              items:
                $ref: '#/components/schemas/ToolOutput'
            
    ToolInput:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          pattern: "^[a-zA-Z][a-zA-Z0-9]*$"
          maxLength: 64
        description:
          type: string
        extensions:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: string
            format: FileExtension
          
    ToolOutput:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
        extensions:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: string
            format: FileExtension

    ToolPage:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ToolDescription'
        total:
          type: integer
          format: int32
        cursor:
          type: string
          format: ToolCursor

    StringDomainType:
      type: string
      enum:
        - pattern
        - enumeration
              
    StringDomain:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/StringDomainType'
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          pattern: PatternStringDomain
          enumeration: EnumerationStringDomain
          
    PatternStringDomain:
      allOf:
        - $ref: '#/components/schemas/StringDomain'
        - type: object
          required:
            - pattern
          properties:
            pattern:
              type: string
              format: regex
    
    EnumerationStringDomain:
      allOf:
        - $ref: '#/components/schemas/StringDomain'
        - type: object
          required:
            - values
          properties:
            values:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                type: string

    ParameterType:
      type: string
      enum:
        - int
        - float
        - string
        - date
        - boolean
        
    ParameterDefinition:
      type: object
      required:
        - type
        - name
        - description
        - required
      properties:
        type:
          $ref: '#/components/schemas/ParameterType'
        name:
          type: string
          pattern: '^[a-zA-Z][a-zA-Z0-9]*'
          maxLength: 64
        description:
          type: string
        required:
          type: boolean
          default: true
      discriminator:
        propertyName: type
        mapping:
          int: IntParameterDefinition
          float: FloatParameterDefinition
          string: StringParameterDefinition
          date: DateParameterDefinition
          boolean: BooleanParameterDefinition
          
    IntParameterDefinition:
      allOf:
        - $ref: '#/components/schemas/ParameterDefinition'
        - type: object
          required:
            - minimum
            - maximum
            - default
          properties:
            minimum:
              type: integer
              format: int64
            maximum:
              type: integer
              format: int64
            default:
              type: integer
              format: int64

    FloatParameterDefinition:
      allOf:
        - $ref: '#/components/schemas/ParameterDefinition'
        - type: object
          required:
            - minimum
            - maximum
            - default
          properties:
            minimum:
              type:  number
              format: double
            maximum:
              type: number
              format: double
            default:
              type: number
              format: double

    StringParameterDefinition:
      allOf:
        - $ref: '#/components/schemas/ParameterDefinition'
        - type: object
          required:
            - domain
            - default
          properties:
            domain:
              $ref: '#/components/schemas/StringDomain'
            default:
              type: string
                
    DateParameterDefinition:
      allOf:
        - $ref: '#/components/schemas/ParameterDefinition'
        - type: object
          required:
            - minimum
            - maximum
            - default
          properties:
            minimum:
              type: string
              format: DateExpr
            maximum:
              type: string
              format: DateExpr
            default:
              type: string
              format: DateExpr
        
    BooleanParameterDefinition:
      allOf:
        - $ref: '#/components/schemas/ParameterDefinition'
        - type: object
          required:
            - default
          properties:
            default:
              type: boolean
            
    Parameter:
      type: object
      required:
        - type
        - name
        - description
        - required
      properties:
        type:
          $ref: '#/components/schemas/ParameterType'
        name:
          type: string
          pattern: '^[a-zA-Z][a-zA-Z0-9]*'
          maxLength: 64
        description:
          type: string
        required:
          type: boolean
          default: true
      discriminator:
        propertyName: type
        mapping:
          int: IntParameter
          float: FloatParameter
          string: StringParameter
          date: DateParameter
          boolean: BooleanParameter
          
    IntParameter:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            minimum:
              type: integer
              format: int64
            maximum:
              type: integer
              format: int64
            default:
              type: integer
              format: int64

    FloatParameter:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            minimum:
              type:  number
              format: double
            maximum:
              type: number
              format: double
            default:
              type: number
              format: double

    StringParameter:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          required:
            - domain
          properties:
            domain:
              $ref: '#/components/schemas/StringDomain'
            default:
              type: string
                
    DateParameter:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            minimum:
              type: string
              format: date
            maximum:
              type: string
              format: date
            default:
              type: string
              format: date
        
    BooleanParameter:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            default:
              type: boolean
            
    Argument:
      type: object
      properties:
        name:
          type: string
          pattern: "^[a-zA-Z][a-zA-Z0-9]*$"
          maxLength: 64
        value:
          $ref: '#/components/schemas/ArgumentValue'

    ArgumentValue:
      oneOf:
        - type: string
        - type: integer
          format: int64
        - type: number
          format: double
        - type: boolean
        
    InvocationDataType:
      type: string
      enum:
        - blob
        
    InvocationData:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/InvocationDataType'
      discriminator:
        propertyName: type
        mapping:
          blob: BlobInvocationData
        
    BlobInvocationData:
      allOf:
        - $ref: '#/components/schemas/InvocationData'
        - type: object
          properties:
            blob:
              type: string
              format: BlobId
    
    InvocationInput:
      type: object
      properties:
        name:
          type: string
          pattern: "^[a-zA-Z][a-zA-Z0-9]*$"
          maxLength: 64
        data:
          $ref: '#/components/schemas/InvocationData'
            
    Invocation:
      type: object
      properties:
        arguments:
          type: array
          items:
            $ref: '#/components/schemas/Argument'
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/InvocationInput'
            
    ExecutionState:
      type: string
      enum:
        # The execution has been invoked, but has not started running yet.
        - starting
        # The execution is currently running. It has not completed yet.
        - running
        # The execution has completed running successfully.
        - succeeded
        # The execution has completed running unsuccessfully.
        - failed
        # The execution was cancelled by the user.
        - cancelled
        
    ExecutionDescription:
      type: object
      properties:
        id:
          type: string
          format: ExecutionId
        tool:
          $ref: '#/components/schemas/ToolPreview'
        owner:
          $ref: '#/components/schemas/AccountPreview'
        name:
          type: string
        state:
          $ref: '#/components/schemas/ExecutionState'
        createdAt:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time

    ExecutionPage:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionDescription'
        cursor:
          type: string
          format: ExecutionCursor
          
    # TODO How do we represent inputs? status?
    # TODO How do we represent outputs? status?
    Execution:
      allOf:
        - $ref: '#/components/schemas/ExecutionDescription'
        - type: object
          properties:
            arguments:
              type: array
              items:
                $ref: '#/components/schemas/Argument'
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/ExecutionInput'
            outputs:
              type: array
              items:
                $ref: '#/components/schemas/ExecutionOutput'
                
    ExecutionDataState:
      type: string
      enum:
        # The data is not available now, but may be available in the future.
        - waiting
        # The data is available now.
        - populated
        # The data is not available now and will not be available in the future
        # because the execution completed successfully but did not populate it.
        - unpopulated
        # The data is not available now and will not be available in the future
        # because the execution did not complete successfully. 
        - cancelled

    ExecutionInput:
      type: object
      properties:
        name:
          type: string
          pattern: "^[a-zA-Z][a-zA-Z0-9]*$"
          maxLength: 64
        state:
          $ref: '#/components/schemas/ExecutionDataState'

    ExecutionOutput:
      type: object
      properties:
        name:
          type: string
          pattern: "^[a-zA-Z][a-zA-Z0-9]*$"
          maxLength: 64
        representations:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ExecutionOutputRepresentation'

    ExecutionOutputRepresentation:
      type: object
      properties:
        extension:
          type: string
          format: FileExtension
        state:
          $ref: '#/components/schemas/ExecutionDataState'

    Blob:
      type: object
      properties:
        id:
          type: string
          format: BlobId
        extension:
          type: string
        size:
          type: integer
          format: int64
          
    DockerPassword:
      type: object
      description: A one-time password for docker login
      properties:
        password:
          type: string
          format: password
        registry:
          type: string
          format: hostname
        expiresAt:
          type: string
          format: date-time
